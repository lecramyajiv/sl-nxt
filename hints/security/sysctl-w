#! /bin/bash

SYSCTL="/sbin/sysctl -w"

###
### IMPROVE SYSTEM MEMORY MANAGEMENT ###
### see https://klaver.it/linux/sysctl.conf

# Increase size of file handles and inode cache

$SYSCTL fs.file-max=209708

# Do less swapping

$SYSCTL vm.swappiness=30
$SYSCTL vm.dirty_ratio=3
$SYSCTL vm.dirty_background_ratio=5

# specifies the minimum virtual address that a process is allowed to mmap

$SYSCTL vm.mmap_min_addr=4096

# 50% overcommitment of available memory

$SYSCTL vm.overcommit_ratio=50
$SYSCTL vm.overcommit_memory=0

# Set maximum amount of memory allocated to shm to 256MB

$SYSCTL kernel.shmmax=268435456
$SYSCTL kernel.shmall=268435456

# Keep at least 64MB of free RAM space available

$SYSCTL vm.min_free_kbytes=65535

#
# NETWORK PERFORMANCE AND TUNING OPTIONS
#

$SYSCTL net.ipv4.route.flush=1                              # the kernel's IPv4 routing table
$SYSCTL net.ipv6.route.flush=1                              # the kernel's IPv4 routing table
$SYSCTL net.core.netdev_max_backlog=16384                   # Increasing the size of the receive queue
$SYSCTL net.core.dev_weight=64                              # Increasing the size of the receive queue
$SYSCTL net.core.somaxconn=8192                             # Increase the maximum connections
$SYSCTL net.ipv4.ip_local_port_range=16384\ 65535            # Allowed local port range

# Do not auto-configure IPv6

$SYSCTL net.ipv6.conf.all.autoconf=0
$SYSCTL net.ipv6.conf.all.accept_ra=0
$SYSCTL net.ipv6.conf.default.autoconf=0
$SYSCTL net.ipv6.conf.default.accept_ra=0
$SYSCTL net.ipv6.conf.eth0.autoconf=0
$SYSCTL net.ipv6.conf.eth0.accept_ra=0

# Use BBR TCP congestion control and set tcp_notsent_lowat to 16384 to ensure HTTP/2 prioritization works optimally
# Do a 'modprobe tcp_bbr' first (kernel > 4.9)
# Fall-back to htcp if bbr is unavailable (older kernels)

$SYSCTL net.ipv4.tcp_congestion_control=htcp
$SYSCTL net.ipv4.tcp_congestion_control=bbr
$SYSCTL net.ipv4.tcp_notsent_lowat=16384

# Turn on the tcp_window_scaling

$SYSCTL net.ipv4.tcp_window_scaling=1

# Increase the read-buffer space allocatable

$SYSCTL net.ipv4.tcp_rmem=8192\ 87380\ 16777216
$SYSCTL net.ipv4.udp_rmem_min=16384
$SYSCTL net.core.rmem_default=262144
$SYSCTL net.core.rmem_max=16777216

# Increase the write-buffer-space allocatable

$SYSCTL net.ipv4.tcp_wmem=8192\ 65536\ 16777216
$SYSCTL net.ipv4.udp_wmem_min=16384
$SYSCTL net.core.wmem_default=262144
$SYSCTL net.core.wmem_max=16777216

# Increase the maximum amount of option memory buffers

$SYSCTL net.core.optmem_max=65535

# try to reuse time-wait connections, but don't recycle them (recycle can break clients behind NAT)

$SYSCTL net.ipv4.tcp_tw_reuse=1

# Limit number of orphans, each orphan can eat up to 16M (max wmem) of unswappable memory

$SYSCTL net.ipv4.tcp_max_orphans=16384
$SYSCTL net.ipv4.tcp_orphan_retries=0

# If set, TCP performs receive buffer auto-tuning, attempting to automatically size the buffer (no greater than tcp_rmem[2]) to match the size
# required by the path for full throughput.

$SYSCTL net.ipv4.tcp_moderate_rcvbuf=1

# By default, TCP saves various connection metrics in the route cache when the connection closes, so that connections established in the near
# future can use these to set initial conditions. If set, TCP will not cache metrics on closing connections.

$SYSCTL net.ipv4.tcp_no_metrics_save=1

# Increase size of RPC datagram queue length

$SYSCTL net.unix.max_dgram_qlen=50

# Don't allow the arp table to become bigger than this

$SYSCTL net.ipv4.neigh.default.gc_thresh3=2048

# Tell the gc when to become aggressive with arp table cleaning.
# Adjust this based on size of the LAN. 1024 is suitable for most /24 networks

$SYSCTL net.ipv4.neigh.default.gc_thresh2=1024

# Adjust where the gc will leave arp table alone - set to 32.

$SYSCTL net.ipv4.neigh.default.gc_thresh1=32

# Adjust to arp table gc to clean-up more often

$SYSCTL net.ipv4.neigh.default.gc_interval=30

# Increase TCP queue length

$SYSCTL net.ipv4.neigh.default.proxy_qlen=96
$SYSCTL net.ipv4.neigh.default.unres_qlen=6

# Enable Explicit Congestion Notification (RFC 3168), disable it if it doesn't work for you

$SYSCTL net.ipv4.tcp_ecn=1
$SYSCTL net.ipv4.tcp_reordering=3

# How many times to retry killing an alive TCP connection

$SYSCTL net.ipv4.tcp_retries2=15
$SYSCTL net.ipv4.tcp_retries1=3

# Avoid falling back to slow start after a connection goes idle
# keeps our cwnd large with the keep alive connections (kernel > 3.6)

$SYSCTL net.ipv4.tcp_slow_start_after_idle=0

# Allow the TCP fastopen flag to be used, beware some firewalls do not like TFO! (kernel > 3.7)

$SYSCTL net.ipv4.tcp_fastopen=3

#####
# TCP/IP HARDENING
#####

$SYSCTL net.ipv4.tcp_max_syn_backlog=4096                   # tcp syn max backlog syn flood protection will kick when this is reached
$SYSCTL net.ipv4.tcp_syncookies=1                           # tcp syn flood protection
$SYSCTL net.ipv4.tcp_syn_retries=2                          # tcp syn flood protection
$SYSCTL net.ipv4.tcp_synack_retries=2                       # tcp syn flood protection
$SYSCTL net.ipv4.conf.all.rp_filter=1                       # Source validation across RFC1812
$SYSCTL net.ipv4.conf.all.log_martians=1                    # Log packets
$SYSCTL net.ipv4.conf.default.log_martians=1                # Log packets
$SYSCTL net.ipv4.tcp_rfc1337=1                              # Enable a fix for RFC1337 - time-wait assassination hazards in TCP
$SYSCTL net.ipv4.tcp_timestamps=1                           # Turn  on tcp timestap for better protection
$SYSCTL net.ipv4.conf.all.bootp_relay=0                     # Don't relay bootp
$SYSCTL net.ipv4.conf.all.proxy_arp=0                       # Don't proxy arp for anyone
$SYSCTL net.ipv4.tcp_fin_timeout=7                          # Decrease the time default value for tcp_fin_timeout connection
$SYSCTL net.ipv4.icmp_echo_ignore_broadcasts=1              # Enable ignoring broadcasts request
$SYSCTL net.ipv4.icmp_echo_ignore_all=0                     # Don't ignore directed pings
$SYSCTL net.ipv4.tcp_max_tw_buckets=1440000                 # Increase the tcp-time-wait buckets pool size to prevent simple DOS attacks

# Disable source routing in TCP/IP Stack
# see https://geektnt.com/sysctl-conf-hardening.html

$SYSCTL net.ipv4.conf.lo.accept_source_route=0              # Disable source Routing
$SYSCTL net.ipv4.conf.all.accept_source_route=0             # Disable source Routing
$SYSCTL net.ipv4.conf.default.accept_source_route=0         # Disable source Routing
$SYSCTL net.ipv4.conf.eth0.accept_source_route=0            # Disable source Routing
$SYSCTL net.ipv6.conf.all.accept_source_route=0             # Disable source Routing
$SYSCTL net.ipv6.conf.default.accept_source_route=0         # Disable source Routing

# rp_filter attempts to implement source address validation as described in RFC
# 1812, “Requirements for IP Version 4 Routers,” Section 5.3.8. In short, packets are silently
# dropped if their source address is such that the host’s forwarding table would not route
# a packet with that destination address out the same interface on which the packet was
# received. According to RFC 1812, if implemented, routers should enable this feature by
# default. This form of address validation is often not enabled on routers, so these commands
# disable it:

# Drop Spoofed Packets coming in on an interface, which, if replied to,
# would result in the reply going out a different interface.
# Also see https://tldp.org/HOWTO/Adv-Routing-HOWTO/lartc.kernel.rpf.html

for f in /proc/sys/net/ipv4/conf/*/rp_filter; do
echo "1" > $f
done

# Limit the maximum memory used to reassemble IP fragments (CVE-2018-5391)

$SYSCTL net.ipv4.ipfrag_low_thresh=196608
$SYSCTL net.ipv6.ip6frag_low_thresh=196608
$SYSCTL net.ipv4.ipfrag_high_thresh=262144
$SYSCTL net.ipv6.ip6frag_high_thresh=262144

# Decrease the time default value for connections to keep alive

$SYSCTL net.ipv4.tcp_keepalive_time=300
$SYSCTL net.ipv4.tcp_keepalive_probes=5
$SYSCTL net.ipv4.tcp_keepalive_intvl=15

# Disables packet forwarding

$SYSCTL net.ipv4.ip_forward=0
$SYSCTL net.ipv4.conf.all.forwarding=0
$SYSCTL net.ipv4.conf.default.forwarding=0
$SYSCTL net.ipv6.conf.all.forwarding=0
$SYSCTL net.ipv6.conf.default.forwarding=0

#ICMP Redirect Requests

$SYSCTL net.ipv4.icmp_ignore_bogus_error_responses=1
$SYSCTL net.ipv4.icmp_echo_ignore_broadcasts=1
$SYSCTL net.ipv4.conf.all.accept_redirects=0
$SYSCTL net.ipv4.conf.default.accept_redirects=0
$SYSCTL net.ipv4.conf.all.secure_redirects=0
$SYSCTL net.ipv4.conf.default.secure_redirects=0
$SYSCTL net.ipv4.conf.all.send_redirects=0
$SYSCTL net.ipv4.conf.default.send_redirects=0
$SYSCTL net.ipv6.conf.all.accept_redirects=0
$SYSCTL net.ipv6.conf.default.accept_redirects=0

#######
# KERNEL HARDENING OPTIONS
########

$SYSCTL kernel.kptr_restrict=2                              # Restricting access to kernel pointers in the proc filesystem
$SYSCTL net.core.bpf_jit_harden=2                           # BPF Hardening
$SYSCTL kernel.unprivileged_bpf_disabled=1                  # BPF Hardening
$SYSCTL kernel.kexec_load_disabled=1                        # Disable kexec, kexec allows replacing running kernel
$SYSCTL kernel.sysrq=0                                      # Controls the System Request debugging functionality of the kernel
$SYSCTL kernel.core_uses_pid=1                              # Controls whether core dumps will append the PID to the core filename.
$SYSCTL kernel.randomize_va_space=2                         # Enable exec shield
$SYSCTL fs.suid_dumpable=0                                  # Restrict core dumps
$SYSCTL kernel.msgmnb=65535                                 # Controls the maximum size of a message, in bytes
$SYSCTL kernel.msgmax=65535                                 # Controls the default maxmimum size of a mesage queue
$SYSCTL kernel.pid_max=65535                                # Allow for more PIDs
